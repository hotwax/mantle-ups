<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="send" noun="UpsRequest">
        <in-parameters>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="path" required="true"/>
            <parameter name="methodType" required="true"/>
            <parameter name="requestMap" type="Map" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" type="Map" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="ups.ShippingGatewayUps" value-field="upsShippingConfig" cache="true"/>
            <if condition="upsShippingConfig == null || !(upsShippingConfig.userId || upsShippingConfig.password)">
                <log message="No shipping configuration found for upsShippingConfigId ${upsShippingConfigId} "/>
                <return type="warning" error="true"
                        message="No shipping configuration found for upsShippingConfigId ${upsShippingConfigId}"/>
            </if>
            <set field="responseMap" from="[:]"/>
            <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;

                  def connectUrl = upsShippingConfig.connectUrl;
                  if (!connectUrl.endsWith("/")) {
                    connectUrl+="/";
                    }
                 connectUrl = connectUrl + path;
                 RestClient restClient = ec.service.rest()
                 restClient.method(methodType)
                 restClient.uri(connectUrl)
                 .basicAuth(upsShippingConfig.userId, upsShippingConfig.password)
                 restClient.contentType("application/json")
                 restClient.jsonObject(requestMap)
                 RestClient.RestResponse restResponse = restClient.call()
                 if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                    String errMsg = restResponse.text()
                        ec.logger.error("Ups error response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Ups API error")
                        ec.message.addMessage(errMsg)
                        return
                    }
                responseMap = restResponse.jsonObject()
            ]]></script>
        </actions>
    </service>


    <!--===============Label Service============ -->

    <service verb="request" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.request#ShippingLabels"/>
        <actions>
            <!-- Get records from Shipment Entity -->
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="!shipment">
                <return error="true" message="Shipment not found with ID ${shipmentId}"/>
            </if>

            <!-- Get records from ShipmentRouteSegment Entity -->
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="!routeSegment">
                <return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/>
            </if>

            <!--If shipmentPackageSeqId is present call service for one package, else for all packages-->
            <entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList">
                <econdition field-name="shipmentId"/>
                <econdition field-name="shipmentRouteSegmentSeqId"/>
                <econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/>
            </entity-find>

            <!--Call service create#ShipmentRequestMap for the shipment map of request-->
            <service-call name="mantle.ups.UpsServices.create#ShipmentRequestMap" in-map="context" out-map="shipmentRequest"/>
            <if condition="!shipmentRequest.shipmentRequestMap">
                <return type="warning" message="No shipment information is available"/>
            </if>
            <set field="shipment" from="[Shipment:shipmentRequest.shipmentRequestMap]"/>
            <set field="shipmentRequest" from="[ShipmentRequest:shipment]"/>

            <!--Calling generic service for sending request-->
            <service-call name="mantle.ups.UpsServices.send#UpsRequest" in-map="[shippingGatewayConfigId:shippingGatewayConfigId, path:'ship/v1/shipments', methodType:'POST', requestMap:shipmentRequest]" out-map="shippingLabelResponseOut"/>

            <!-- Get PackageResults from shippingLabelResponseOut to extract image Urls and tracking numbers -->
            <set field="packageResultsList" from="shippingLabelResponseOut.responseMap.ShipmentResponse.ShipmentResults.PackageResults"/>

            <!-- If shippingLabelResponseOut is empty -->
            <set field="responseMap" from="shippingLabelResponseOut.responseMap"/>
            <if condition="!responseMap">
                <return type="danger" message="Response not received on calling get#ShippingLabel service"></return>
            </if>

            <!-- Store label image urls and tracking numbers as a key-value pair in a list in the same sequence of packages as in request-->
            <set field="imageUrls" from="[:]"/>

            <if condition="packageResultsList instanceof List">
                <iterate list="packageResultsList" entry="packageResultInfo">
                    <set field="graphicImageUrl" from="packageResultInfo.ShippingLabel.GraphicImage"/>
                    <set field="trackingNumber" from="packageResultInfo.TrackingNumber"/>
                    <script>imageUrls.put(graphicImageUrl, trackingNumber)</script>
                </iterate>
                <else>
                    <!--If packageResult is a Map for single package -->
                    <set field="graphicImageUrl" from="packageResultsList.ShippingLabel.GraphicImage"/>
                    <set field="trackingNumber" from="packageResultsList.TrackingNumber"/>
                    <script>imageUrls.put(graphicImageUrl, trackingNumber)</script>
                </else>
            </if>

            <!-- Store each Package's trackingCode and labelImage in its record of packageRouteSeg -->
            <iterate list="packageRouteSegList" entry="packageRouteSeg">
                <script>
                    for(Map.Entry imageMapEntry in imageUrls){
                      String url = imageMapEntry.getKey()
                      String trackingNumber = imageMapEntry.getValue()
                      byte[] binData = Base64.getDecoder().decode(url)
                </script>
                <set field="packageRouteSeg.trackingCode" from="trackingNumber"/>
                <set field="packageRouteSeg.labelImage" from="binData"/>
                <entity-update value-field="packageRouteSeg"/>
                <script>}</script>
            </iterate>
        </actions>

    </service>

</services>