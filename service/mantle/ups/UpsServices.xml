<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="send" noun="UpsRequest">
        <in-parameters>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="path" required="true"/>
            <parameter name="methodType" required="true"/>
            <parameter name="requestMap" type="Map" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" type="Map" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="ups.ShippingGatewayUps" value-field="upsShippingConfig" cache="true"/>
            <if condition="upsShippingConfig == null || !(upsShippingConfig.userId || upsShippingConfig.password)">
                <log message="No shipping configuration found for upsShippingConfigId ${upsShippingConfigId} "/>
                <return type="warning" error="true"
                        message="No shipping configuration found for upsShippingConfigId ${upsShippingConfigId}"/>
            </if>
            <set field="responseMap" from="[:]"/>
            <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;

                  def connectUrl = upsShippingConfig.connectUrl;
                  if (!connectUrl.endsWith("/")) {
                    connectUrl+="/";
                    }
                 connectUrl = connectUrl + path;
                 RestClient restClient = ec.service.rest()
                 restClient.method(methodType)
                 restClient.uri(connectUrl)
                 .basicAuth(upsShippingConfig.userId, upsShippingConfig.password)
                 restClient.contentType("application/json")
                 restClient.jsonObject(requestMap)
                 RestClient.RestResponse restResponse = restClient.call()
                 if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                    String errMsg = restResponse.text()
                        ec.logger.error("Ups error response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Ups API error")
                        ec.message.addMessage(errMsg)
                        return
                    }
                responseMap = restResponse.jsonObject()
            ]]></script>
        </actions>
    </service>


    <!-- ========== Label Service ========== -->
    <service verb="get" noun="OrderShippingRate">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="createOrderItem" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <!-- call get#ItemInfoList to get Item List used as in-map in get#AutoPackageInfoList service -->
            <service-call name="mantle.ups.UpsServices.get#ItemInfoList" in-map="[orderId:orderId]" out-map="itemList"/>

            <!-- call get#AutoPackageInfoList to get packageInfoList -->
            <service-call name="mantle.ups.UpsServices.get#AutoPackageInfoList" in-map="[itemList]" out-map="packageInfoList"/>

            <!-- Get shipmentId from packageInfoList used as key-map field for ShipmentPackageRouteSeg -->
            <set field="shipmentId" from="packageInfoList.packageInfoList[0].shipmentId"/>

            <!--Call get#ShipmentRequestMap to get Shipment Map of ShipmentRequest -->
            <service-call name="mantle.ups.UpsServices.get#ShipmentRequestMap" in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                            shippingGatewayConfigId:shippingGatewayConfigId, packageInfoList:packageInfoList.packageInfoList]" out-map="shipment"/>

            <set field="path" value="ship/v1/shipments"/>
            <set field="method" value="POST"/>
            <set field="shipmentRequest" from="[ShipmentRequest:[Shipment:shipment.shipment]]"/>

            <!--Calling generic service for sending request-->
            <service-call name="mantle.ups.UpsServices.send#UpsRequest" in-map="[shippingGatewayConfigId:shippingGatewayConfigId, path:path, methodType:method, requestMap:shipmentRequest]" out-map="shippingLabelResponseOut"/>

            <!-- Get PackageResults from shippingLabelResponseOut to extract Urls -->
            <set field="packageResultsList" from="shippingLabelResponseOut.responseMap.ShipmentResponse.ShipmentResults.PackageResults"/>

            <set field="imageUrls" from="[]"/>
            <!-- If packageResult is a list for multiple packages -->
            <if condition="packageResultsList instanceof List">
                <iterate list="packageResultsList" entry="packageResultInfo">
                    <set field="graphicImageUrl" from="packageResultInfo.ShippingLabel.GraphicImage"/>
                    <set field="trackingNumber" from="packageResultInfo.TrackingNumber"/>
                    <script><![CDATA[
                      String url = graphicImageUrl
                      byte[] binData = Base64.getDecoder().decode(url)
                      Blob blob = new javax.sql.rowset.serial.SerialBlob(binData)
                      imageUrls.add(blob)
                      ]]></script>
                </iterate>
                <else>
                    <!--If packageResult is a Map for single package -->
                    <set field="graphicImageUrl" from="packageResultsList.ShippingLabel.GraphicImage"/>
                    <set field="trackingNumber" from="packageResultsList.TrackingNumber"/>
                    <script><![CDATA[
                      String url = graphicImageUrl
                      byte[] binData = Base64.getDecoder().decode(url)
                      Blob blob = new javax.sql.rowset.serial.SerialBlob(binData)
                      imageUrls.add(blob)
                      ]]></script>
                </else></if>

            <!--Store image of label for each package in ShipmentPackageRouteSeg -->
            <iterate list="packageInfoList.packageInfoList" entry="packageInfo">
                <set field="shipmentId" from="packageInfo.shipmentId"/>
                <set field="shipmentPackageSeqId" from="packageInfo.shipmentPackageSeqId"/>
                <entity-find-one entity-name="mantle.shipment.ShipmentPackageRouteSeg" value-field="shipmentPackageRouteSeg">
                    <field-map field-name="shipmentId" />
                    <field-map field-name="shipmentPackageSeqId"/>
                </entity-find-one>
                <script>for(Blob image : imageUrls){</script>
                <set field="shipmentPackageRouteSeg.labelImage" from="image"/>
                <script>}</script>
                <entity-update value-field="shipmentPackageRouteSeg"/>
            </iterate>

        </actions>
    </service>

</services>