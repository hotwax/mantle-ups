<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <!-- ============================================= -->
    <!-- ========== Shipping Rate Service ============ -->
    <!-- ============================================= -->

    <service verb="get" noun="ShippingRate">
        <implements service="mantle.shipment.CarrierServices.get#ShippingRate"/>
        <in-parameters>
            <parameter name="shippingGatewayConfigId" default-value="UPS_DEMO"/>
            <parameter name="shipmentRouteSegmentSeqId" default-value="01"/>
            <parameter name="shipmentPackageSeqId" default-value="01"/>
        </in-parameters>
        <out-parameters>
            <parameter name="requestMap"/>
            <parameter name="responseMap"/>
            <parameter name="errMsg"/>
        </out-parameters>
        <actions>

            <!--  ==============  Login Credentials  ==============  -->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiUsernameOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSUsername"/>
            </entity-find-one>
            <set field="apiUsername" from="apiUsernameOpt?.optionValue"/>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiPasswordOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSPassword"/>
            </entity-find-one>
            <set field="apiPassword" from="apiPasswordOpt?.optionValue"/>

<!--            <log level="info" message="=================${apiUsername}==================="/>-->
<!--            <log level="info" message="=================${apiPassword}==================="/>-->


            <!-- ==============  Shipment_Record  ============== -->

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="originPostalContactMechId" from="routeSegment.originPostalContactMechId"/>
            <set field="destPostalContactMechId" from="routeSegment.destPostalContactMechId"/>\

            <set field="hasIssues" from="false"/>
            <set field="fromPartyId" from="shipment.fromPartyId"/>
            <if condition="!fromPartyId"><set field="hasIssues" from="true"/><message type="danger">From party not set on shipment ${shipmentId}</message></if>
            <set field="toPartyId" from="shipment.toPartyId"/>
            <if condition="!toPartyId"><set field="hasIssues" from="true"/><message type="danger">To party not set on shipment ${shipmentId}</message></if>
            <if condition="hasIssues"><message type="danger">Issues found, not requesting Shippo labels</message><return/></if>
            <if condition="!originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>
            <if condition="!destPostalContactMechId &amp;&amp; routeSegment.destinationFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipDest" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.destinationFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="destPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.destPostalContactMechId" from="destPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>
            <if condition="!routeSegment.carrierPartyId"><log level="warn" message="This ShipmentID ===${shipmentId}=== has no carrierPartyId, not getting rates"/></if>
<!--                      <log level="info" message="=================${routeSegment}==================="/>-->

            <!--  ==============  Shipper and ShipFrom  ==============  -->

            <if condition="originPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originAddress">
                    <field-map field-name="contactMechId" from="routeSegment.originPostalContactMechId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="originState">
                    <field-map field-name="geoId" from="originAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="originCountry">
                    <field-map field-name="geoId" from="originAddress.countryGeoId"/>
                </entity-find-one>
<!--                        <log level="info" message="=================${originAddress}==================="/>-->
                <set field="Address" from="[AddressLine:originAddress.address1,City:originAddress.city, StateProvinceCode:originState.geoCodeAlpha2, PostalCode:originAddress.postalCode, CountryCode:originCountry.geoCodeAlpha2]"/>
                <set field="Shipper" from="[Name:originAddress.toName,Address:Address]"/>
                <set field="Address" from="[AddressLine:originAddress.address1,City:originAddress.city, StateProvinceCode:originState.geoCodeAlpha2, PostalCode:originAddress.postalCode,CountryCode:originCountry.geoCodeAlpha2]"/>
                <set field="ShipFrom" from="[Name:originAddress.toName,Address:Address]"/>
            </then><else>
                <message error="true">No origin address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>


            <!--  ==============  Address_to  ==============  -->

            <if condition="destPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destAddress">
                    <field-map field-name="contactMechId" from="routeSegment.destPostalContactMechId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="destState">
                    <field-map field-name="geoId" from="destAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="destCountry">
                    <field-map field-name="geoId" from="destAddress.countryGeoId"/>
                </entity-find-one>
<!--                         <log level="info" message="=================${destAddress}==================="/>-->
                <set field="Address" from="[AddressLine:destAddress.address1,City:destAddress.city, StateProvinceCode:destState.geoCodeAlpha2, PostalCode:destAddress.postalCode,CountryCode:destCountry.geoCodeAlpha2]"/>
                <set field="ShipTo" from="[Name:destAddress.toName,Address:Address]"/>
            </then><else>
                <message error="true">No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>


            <!--  ==============  Weight  ==============  -->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="shipmentPackage">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>
            <if condition="!shipmentPackage.weightUomId"><log level="warn" message="This shipmentId ===${shipmentId}=== has no Shipment package, not getting rates"/><return/></if>
            <set field="weight" from="shipmentPackage.weight" type="String"/>
            <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="shipmentBoxType">
                <field-map field-name="shipmentBoxTypeId" from="shipmentPackage.shipmentBoxTypeId"/>
            </entity-find-one>
            <set field="length" from="shipmentBoxType.boxLength" type="String"/>
            <set field="width" from="shipmentBoxType.boxWidth" type="String"/>
            <set field="height" from="shipmentBoxType.boxHeight" type="String"/>


            <!--  ==============  Carrier_Id  ==============  -->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="carrierParty">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="routeSegment.carrierPartyId"/>
            </entity-find-one>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayMethod" value-field="carrier">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="carrierParty.carrierPartyId"/>
                <field-map field-name="shipmentMethodEnumId" from="routeSegment.shipmentMethodEnumId"/>
            </entity-find-one>
            <set field="carrierIds" from="[carrier.gatewayServiceCode]"/>
            <if condition="!carrierIds"><log level="warn" message="Shipping Gateway ${shippingGatewayConfigId} has no carrierId, not getting rates"/><return/></if>
<!--            <log level="info" message="=================${carrierIds}==================="/>-->

            <set field="Service" from="[Code:carrierIds]"/>
            <set field="UnitOfMeasurement" from="[Code:'LBS']"/>
            <set field="ShipmentTotalWeight" from="[UnitOfMeasurement:UnitOfMeasurement,Weight:weight]"/>
            <set field="PackagingType" from="[Code:shipmentBoxType.gatewayBoxId]"/>
            <set field="UnitOfMeasurement" from="[Code:'IN']"/>
            <set field="Dimensions" from="[UnitOfMeasurement:UnitOfMeasurement, Length:length,Width:width, Height:height]"/>
            <set field="UnitOfMeasurement" from="[Code:'LBS']"/>
            <set field="PackageWeight" from="[UnitOfMeasurement:UnitOfMeasurement,Weight:weight]"/>
            <set field="Packages" from="[PackagingType:PackagingType,Dimensions:Dimensions, PackageWeight:PackageWeight]"/>
            <set field="Shipment" from="[Shipper:Shipper,ShipTo:ShipTo,ShipFrom:ShipFrom,Service:Service,ShipmentTotalWeight:ShipmentTotalWeight, Package:Packages]"/>
            <set field="RateRequest" from="[Shipment:Shipment]"/>
            <set field="requestMap" from="[RateRequest:RateRequest]"/>
            <set field="responseMap" from="[]"/>
            <set field="errMsg" type="String"/>

            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                            .addHeader("AccessLicenseNumber", "")
                            .addHeader("Username", "${apiUsername}")
                            .addHeader("Password", "${apiPassword}")
                    restClient.uri().protocol("https").host("onlinetools.ups.com").port(443).path("ship/v1/rating/Rate").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>
        </actions>
    </service>


    <!-- ============================================= -->
    <!-- ========== Create Label Service ============= -->
    <!-- ============================================= -->

    <service verb="post" noun="CreateLabel">
        <implements service="mantle.shipment.CarrierServices.request#ShippingLabels"/>
        <out-parameters>
            <parameter name="requestMap"/>
            <parameter name="responseMap"/>
            <parameter name="errMsg"/>
        </out-parameters>
        <actions>

            <!--  ==============  Login Credentials  ==============  -->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiUsernameOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSUsername"/>
            </entity-find-one>
            <set field="apiUsername" from="apiUsernameOpt?.optionValue"/>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiPasswordOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSPassword"/>
            </entity-find-one>
            <set field="apiPassword" from="apiPasswordOpt?.optionValue"/>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="ShipperNum">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSShipperNumber"/>
            </entity-find-one>
            <set field="ShipperNumber" from="ShipperNum?.optionValue"/>
<!--            <log level="info" message="=================${apiUsername}==================="/>-->
<!--            <log level="info" message="=================${apiPassword}==================="/>-->


            <!-- ==============  Shipment_Record  ============== -->

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="originPostalContactMechId" from="routeSegment.originPostalContactMechId"/>
            <set field="destPostalContactMechId" from="routeSegment.destPostalContactMechId"/>\

            <set field="hasIssues" from="false"/>
            <set field="fromPartyId" from="shipment.fromPartyId"/>
            <if condition="!fromPartyId"><set field="hasIssues" from="true"/><message type="danger">From party not set on shipment ${shipmentId}</message></if>
            <set field="toPartyId" from="shipment.toPartyId"/>
            <if condition="!toPartyId"><set field="hasIssues" from="true"/><message type="danger">To party not set on shipment ${shipmentId}</message></if>
            <if condition="hasIssues"><message type="danger">Issues found, not requesting Shippo labels</message><return/></if>
            <if condition="!originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>
            <if condition="!destPostalContactMechId &amp;&amp; routeSegment.destinationFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipDest" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.destinationFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="destPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.destPostalContactMechId" from="destPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>
            <if condition="!routeSegment.carrierPartyId"><log level="warn" message="This ShipmentID ===${shipmentId}=== has no carrierPartyId, not getting rates"/></if>
<!--                      <log level="info" message="=================${routeSegment}==================="/>-->


            <!--  ==============  Shipper and ShipFrom  ==============  -->

            <if condition="originPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originAddress">
                    <field-map field-name="contactMechId" from="routeSegment.originPostalContactMechId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="originState">
                    <field-map field-name="geoId" from="originAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="originCountry">
                    <field-map field-name="geoId" from="originAddress.countryGeoId"/>
                </entity-find-one>
<!--                        <log level="info" message="=================${originAddress}==================="/>-->
                <set field="Address" from="[AddressLine:originAddress.address1,City:originAddress.city, StateProvinceCode:originState.geoCodeAlpha2, PostalCode:originAddress.postalCode, CountryCode:originCountry.geoCodeAlpha2]"/>
                <set field="Shipper" from="[Name:originAddress.toName,ShipperNumber:ShipperNumber,Address:Address]"/>
                <set field="Address" from="[AddressLine:originAddress.address1,City:originAddress.city, StateProvinceCode:originState.geoCodeAlpha2, PostalCode:originAddress.postalCode,CountryCode:originCountry.geoCodeAlpha2]"/>
                <set field="ShipFrom" from="[Name:originAddress.toName,Address:Address]"/>
            </then><else>
                <message error="true">No origin address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>


            <!--  ==============  Address_To  ==============  -->

            <if condition="destPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destAddress">
                    <field-map field-name="contactMechId" from="routeSegment.destPostalContactMechId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="destState">
                    <field-map field-name="geoId" from="destAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Geo" value-field="destCountry">
                    <field-map field-name="geoId" from="originAddress.countryGeoId"/>
                </entity-find-one>
<!--                         <log level="info" message="=================${destAddress}==================="/>-->
                <set field="Address" from="[AddressLine:destAddress.address1,City:destAddress.city, StateProvinceCode:destState.geoCodeAlpha2, PostalCode:destAddress.postalCode,CountryCode:destCountry.geoCodeAlpha2]"/>
                <set field="ShipTo" from="[Name:destAddress.toName,Address:Address]"/>
            </then><else>
                <message error="true">No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>


            <!--  ==============  Weight  ==============  -->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="shipmentPackage">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>
            <if condition="!shipmentPackage.weightUomId"><log level="warn" message="This shipmentId ===${shipmentId}=== has no Shipment package, not getting rates"/><return/></if>
            <set field="weight" from="shipmentPackage.weight" type="String"/>
            <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="shipmentBoxType">
                <field-map field-name="shipmentBoxTypeId" from="shipmentPackage.shipmentBoxTypeId"/>
            </entity-find-one>


            <!--  ==============  Carrier_Id  ==============  -->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="carrierParty">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="routeSegment.carrierPartyId"/>
            </entity-find-one>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayMethod" value-field="carrier">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="carrierParty.carrierPartyId"/>
                <field-map field-name="shipmentMethodEnumId" from="routeSegment.shipmentMethodEnumId"/>
            </entity-find-one>
            <set field="carrierIds" from="[carrier.gatewayServiceCode]"/>
            <if condition="!carrierIds"><log level="warn" message="Shipping Gateway ${shippingGatewayConfigId} has no carrierId, not getting rates"/><return/></if>
<!--            <log level="info" message="=================${carrierIds}==================="/>-->

            <set field="Service" from="[Code:carrierIds]"/>
            <set field="UnitOfMeasurement" from="[Code:'LBS']"/>
            <set field="Packaging" from="[Code:shipmentBoxType.gatewayBoxId]"/>
            <set field="UnitOfMeasurement" from="[Code:'LBS']"/>
            <set field="PackageWeight" from="[UnitOfMeasurement:UnitOfMeasurement,Weight:weight]"/>
            <set field="Packages" from="[Packaging:Packaging, PackageWeight:PackageWeight]"/>
            <set field="BillShipper" from="[AccountNumber:ShipperNumber]"/>
            <set field="ShipmentCharge" from="[Type:'01',BillShipper:BillShipper]"/>
            <set field="PaymentInformation" from="[ShipmentCharge:ShipmentCharge]"/>
            <set field="LabelImageFormat" from="[Code:'PNG']"/>
            <set field="LabelSpecification" from="[LabelImageFormat:LabelImageFormat]"/>
            <set field="Shipment" from="[Shipper:Shipper,ShipTo:ShipTo,ShipFrom:ShipFrom,PaymentInformation:PaymentInformation,Service:Service, Package:Packages]"/>
            <set field="ShipmentRequest" from="[Shipment:Shipment,LabelSpecification:LabelSpecification]"/>
            <set field="requestMap" from="[ShipmentRequest:ShipmentRequest]"/>
            <set field="responseMap" from="[]"/>
            <set field="errMsg" type="String"/>

            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                            .addHeader("AccessLicenseNumber", "")
                            .addHeader("Username", "${apiUsername}")
                            .addHeader("Password", "${apiPassword}")
                            .addHeader("transactionSrc", "testing")
                            .addHeader("transId", "")
                    restClient.uri().protocol("https").host("onlinetools.ups.com").port(443).path("ship/v1/shipments").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>


            <!-- ==============  Always save result from response  ============== -->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackageRouteSeg" value-field="packageRouteSeg">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentRouteSegmentSeqId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>

            <set field="packageRouteSeg.gatewayStatus" from="responseMap.ShipmentResponse.Response.ResponseStatus.Code"/>
            <set field="packageRouteSeg.gatewayMessage" from="responseMap.ShipmentResponse.Response.ResponseStatus.Description"/>
            <set field="packageRouteSeg.packageTransportAmount" from="responseMap.ShipmentResponse.ShipmentResults.ShipmentCharges.TransportationCharges.MonetaryValue"/>
            <set field="packageRouteSeg.packageServiceAmount" from="responseMap.ShipmentResponse.ShipmentResults.ShipmentCharges.ServiceOptionsCharges.MonetaryValue"/>
            <set field="packageRouteSeg.actualAmount" from="responseMap.ShipmentResponse.ShipmentResults.ShipmentCharges.TotalCharges.MonetaryValue"/>
            <set field="packageRouteSeg.trackingCode" from="responseMap.ShipmentResponse.ShipmentResults.PackageResults.TrackingNumber"/>
            <set field="packageRouteSeg.gatewayLabelId" from="responseMap.ShipmentResponse.ShipmentResults.ShipmentIdentificationNumber"/>
            <set field="packageRouteSeg.labelImage" from="responseMap.ShipmentResponse.ShipmentResults.PackageResults.ShippingLabel.GraphicImage"/>
            <set field="packageRouteSeg.labelHtml" from="responseMap.ShipmentResponse.ShipmentResults.PackageResults.ShippingLabel.HTMLImage"/>

            <entity-update value-field="packageRouteSeg"/>
        </actions>
    </service>


    <!-- ============================================= -->
    <!-- ========== Void Label Service =============== -->
    <!-- ============================================= -->

    <service verb="delete" noun="VoidLabel">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentRouteSegmentSeqId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
            <parameter name="errMsg"/>
        </out-parameters>
        <actions>

            <!--  ==============  Login Credentials  ==============  -->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiUsernameOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSUsername"/>
            </entity-find-one>
            <set field="apiUsername" from="apiUsernameOpt?.optionValue"/>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiPasswordOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoUPSPassword"/>
            </entity-find-one>
            <set field="apiPassword" from="apiPasswordOpt?.optionValue"/>

            <!--            <log level="info" message="=================${apiUsername}==================="/>-->
            <!--            <log level="info" message="=================${apiPassword}==================="/>-->


            <!-- ============== Shipment Record ============== -->

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="packages"/>
            <if condition="packages == null"><log level="warn" message="Shipment Package not found with ID ${shipmentId}:${shipmentPackageSeqId}"/></if>


            <!-- ==============  Package Route Segment  ============== -->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackageRouteSeg" value-field="packageRouteSeg">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentRouteSegmentSeqId"/>
                <field-map field-name="shipmentPackageSeqId" />
            </entity-find-one>
            <if condition="!packageRouteSeg.gatewayLabelId"><return error="true" message="Label Id not found with Shipment Package ${shipmentId}:${shipmentPackageSeqId}"/></if>
            <set field="labelId" from="packageRouteSeg.gatewayLabelId"/>

<!--            <log level="info" message="=================${labelId}==================="/>-->

            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.DELETE)
                    .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    .addHeader("AccessLicenseNumber", "")
                    .addHeader("Username", "${apiUsername}")
                    .addHeader("Password", "${apiPassword}")
                    restClient.uri().protocol("https").host("onlinetools.ups.com").port(443).path("ship/v1/shipments/cancel/${labelId}").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>
        </actions>
    </service>

</services>




